@page "/lights"
@using PsiCat.SmartDevices
@inject PsiCatClient Client
@inject SmartDevicesPlugin SmartDevices

<h3>Lights</h3>
<button type="button" @onclick="Refresh" disabled="@RefreshDisabled">
    <span class="oi oi-reload"></span>
    Refresh
</button>

<div>
    <ul>
        @foreach (SmartDevice light in Config.Devices
            .Where(device => device.Type == SmartDeviceType.Light))
        {
            <li><Yeelight SmartDevice="light" @ref="@yeelightElement" /></li>
        }
    </ul>    
</div>

<footer class="px-4">
    <TextConsole Contents="@(Client.Logger as IConsoleContents)" Rows="1" />
</footer>


@code 
{
    private bool RefreshDisabled { get; set; } = true;
    private List<Yeelight?> Yeelights { get; set; } = new List<Yeelight?>();

    private SmartDevicesConfig Config
    {
        get { return (SmartDevicesConfig)SmartDevices.Config; }
    }

    private Yeelight? yeelightElement
    {
        set { Yeelights.Add(value); }
    }
    
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            UpdateState();
        }
        
        base.OnAfterRender(firstRender);
    }


    private async void UpdateState()
    {
        foreach (Yeelight? light in Yeelights)
        {
            if (light != null)
                await light.UpdateState();
        }
        this.RefreshDisabled = false;
        await InvokeAsync(StateHasChanged);
    }


    private async void Refresh()
    {
        foreach (Yeelight? light in Yeelights)
        {
            if (light != null)
                light.IsDisabled = true;
        }
        this.RefreshDisabled = true;
        await InvokeAsync(StateHasChanged);
        
        await SmartDevices.SmartLights.LocateAll();
        UpdateState();
    }
}