@page "/devices"
@using PsiCat.SmartDevices
@using PsiCat.Plugins
@inject PsiCatClient Client

<h3>Devices</h3>

<h5>Lights</h5>
<div @onkeyup="() => FormUnchanged = false">
    <ul ondragover="event.preventDefault();">
        @foreach (SmartDevice light in configChanges.Devices
            .Where(device => device.Type == SmartDeviceType.Light))
        {
            <li class="list-group-item"
                draggable="true"
                @key="light.IP"
                @ondrag="@(() => Devices_DragStart(light))"
                @ondrop="@(() => Devices_DragDrop(light))">
                <input @bind="@light.Name"/> : @light.IP
            </li>
        }
    </ul>    
</div>

<button @onclick="@SaveChanges" disabled="@FormUnchanged">Save Changes</button>



@code {
    private SmartDevicesConfig configChanges;
    private int currentDeviceIndex = 0;
    
    private bool FormUnchanged { get; set; }
    
    private SmartDevicesConfig Config
    {
        get
        {
            return (SmartDevicesConfig)
                   Client
                       .Plugins["PsiCAT Smart Devices"]
                       .Config;
        }
        set
        {
            Client
                .Plugins["PsiCAT Smart Devices"]
                .Config = value;
        }
    }
    
    
    protected override void OnInitialized()
    {
        configChanges = PsiCat.Config.Clone(Config);
        FormUnchanged = true;
    }


    private void SaveChanges()
    {
        Config = configChanges;
        Config.Save();
        configChanges = PsiCat.Config.Clone(Config);
        FormUnchanged = true;
    }

    
    private void Devices_DragStart(SmartDevice device)
    {
        this.currentDeviceIndex = GetDeviceIndex(device);
    }


    private void Devices_DragDrop(SmartDevice device)
    {
        if (device == null)
            return;

        int newIndex = GetDeviceIndex(device);
        SmartDevice currentDevice = configChanges.Devices[this.currentDeviceIndex];
        configChanges.Devices.RemoveAt(this.currentDeviceIndex);
        configChanges.Devices.Insert(newIndex, currentDevice);
        this.currentDeviceIndex = newIndex;
        
        FormUnchanged = false;
        StateHasChanged();
    }


    private int GetDeviceIndex(SmartDevice device)
    {
        return configChanges.Devices.FindIndex(entry => entry.IP == device.IP);
    }
}